""" Bepaal de Big O voor elk van de volgende algoritmen. """

bron: https://wiki.python.org/moin/TimeComplexity 
---------------------------------------------------------------------------------

1)  Het ophalen van een item in een Python list door middel van zijn index.
    O(n)
    De lengte van een lijst heeft geen invloed op de tijdscomplexiteit van het ophalen van een item
    in een Python list. 

2)  Het op de juiste plek invoegen van een waarde in een gesorteerde Python lijst.
    O(n)
    In de worst case zal je een item achteraan de lijst moeten invoegen. 
    Een lijst met 5 elementen waaraan je het getal 6 moet toevoegen zorgt voor 5 vergelijkingen
    Een lijst met daarna 6 elementen waaraan je het getal 7 moet toevoegen zorgt voor 6 vergelijkingen

3)  Het Shell sorteren van een array.
    best case: O(n log(n))
    average: O(n(log(n))^2)
    worst: O(n(log(n))^2)

    Door de for-loops die toenemen in dit sorteeralgoritme zorgt het ervoor dat de macht toeneemt
    van bv n^2 naar n^3. 

4)  Het Bubble sorteren van een array.
    best case: O(n)
    average: O(n^2)
    worst: O(n^2)

    Loopt telkens meerdere keren de lijst af om te sorteren. Dit werkt zeer inefficiÃ«nt. 

5)  Het oplossen van de Torens van Hanoi voor n schijven. 
    Voor n = 1, 2, 3, 4, 5 en 6 is het aantal operaties, respectievelijk, 1, 3, 7, 15, 31 en 63.
    de getallen nemen met 2,4,8,16,32 toe. 
    Dit zorgt voor een tijdscomplexiteit van O(2^n)

6)  Het vinden van alle permutaties (unieke volgordes) voor een array van n items. 
    Voor de cijfers 1, 2 en 3 zijn er zes permutaties -- 123, 132, 213, 231, 312 en 321.
    3! = 3x2x1
    4! = 4x3x2x1
    5! = 5x4x3x2x1 
    .....
    O(N * N!)
    